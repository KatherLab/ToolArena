name: llmaix_extract_text # Name of the task. Should correspond to the name of the folder.
repo:
  name: LLMAIx # Name of the repository.
  url: "https://github.com/KatherLab/LLMAIx" # URL of the repository.
  commit: 693564b # Commit hash of the repository (optional, default is the latest commit). It is recommended to use a specific commit to ensure reproducibility.
  # branch: main # Branch of the repository (optional)
  # env:
    # Here, you can specify environment variables that should be available for installing the repository or running the task.
    # The format is key: value, where value is a string that can include variables from the local environment.
    # You may also leave this empty if the repository does not require any tokens/secrets.
    # HF_TOKEN: "${env:HF_TOKEN}"  # Example environment variable that sets HF_TOKEN to the local environment variable HF_TOKEN.
papers: [wiest2024llm] # List of papers that this task is based on. Papers are specified by their IDs in the papers.bib file.
category: information_extraction # Category of the task.
description: Preprocess various input files into a standardized structure - a list of the texts. The list can contain multiple texts in case of .csv and .xlsx input files. In some cases, OCR needs to be applied or even enforced to get the correct text from a pdf (or image) document. # Description of the task. This should be 1-3 sentences in length, explaining to the LLM what this tool should do.
arguments:
  # List of arguments of the task. Each argument is a dictionary with the keys "name", "description", and "type".
  # For example, the following 3 lines define an argument "input_image" with a description "Path to the input image" and a type "str".
  - name: file_path
    description: Path to the input file. Input file can be a .pdf, .csv, .xlsx, .png, .jpg and .docx file.
    type: str  # supported types are "str", "int", "float", "bool", "list", "dict"
  # You may define more arguments as needed...
returns:
  # List of outputs of the task. Each output is a dictionary with the keys "name", "description", and "type".
  # Here, we just define a single output "features", but you may define more as needed.
  - name: ocr_text_list
    description: The preprocessed document(s), as a list of strings (usually only one string, but in case .csv or .xlsx documents are preprocessed - one per line).
    type: list
example:
  # Below, we define an example invocation of the task, i.e. a specific input to the tool.
  # This section is required, and it consists of "arguments" and "mount" (see below).
  arguments:
    # For each input argument, specify the value to be used for the example invocation.
    # You must specify a "name" and a "value" for all arguments that are defined in the "arguments" section.
    - name: file_path
      value: /mount/input/9874563.pdf
  mount:
    # In this section, you can specify files or folders that should be mounted from the data directory to the container (at "/mount/input" in the container).
    # Each mount is a dictionary with the keys "source" and "target", where "source" is the path to the file or folder in the data directory and "target" is the path to the file or folder in the container.
    # For example, the following line mounts the file "TUM-TCGA-ACRLPPQE.tif" from the data directory to the container, placing it at the path "/mount/input/TUM-TCGA-ACRLPPQE.tif" in the container.
    - source: 9874563.pdf
      target: 9874563.pdf
test_invocations:
  # Below, we define test invocations for the task.
  # Each test invocation is a dictionary with the keys "name", "arguments", and "mount", like the example invocation above (with the addition of the "name" key).
  # The test invocations can be used in the unit tests to check that the task is working as expected.
  # Below, we define 3 test invocations for the task, named "tif", "png", and "jpg". 
  # It is recommended that you define at least 3 test invocations (of course, you can choose any names you want).
  - name: pdf_ocr
    arguments:
      - name: file_path
        value: /mount/input/9874563.pdf
    mount:
      - source: 9874563.pdf
        target: 9874563.pdf
  - name: pdf_ocr_force
    arguments:
      - name: file_path
        value: /mount/input/9874562.pdf
    mount:
      - source: 9874562.pdf
        target: 9874562.pdf
  - name: csv
    arguments:
      - name: file_path
        value: /mount/input/data.csv
    mount:
      - source: data.csv
        target: data.csv
  - name: xlsx
    arguments:
      - name: file_path
        value: /mount/input/data.xlsx
    mount:
      - source: data.xlsx
        target: data.xlsx
  - name: image
    arguments:
      - name: file_path
        value: /mount/input/9874563.png
    mount:
      - source: 9874563.png
        target: 9874563.png
