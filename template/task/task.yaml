name: conch_extract_features # Name of the task. Should correspond to the name of the folder.
repo:
  name: CONCH # Name of the repository.
  url: "https://github.com/mahmoodlab/CONCH" # URL of the repository.
  commit: 171f2be # Commit hash of the repository (optional, default is the latest commit). It is recommended to use a specific commit to ensure reproducibility.
  # branch: main # Branch of the repository (optional)
  env:
    # Here, you can specify environment variables that should be available for installing the repository or running the task.
    # The environment variables are specified as a list of dictionaries, where each dictionary contains the keys "name" and "value".
    # The value is a string that can include variables from the local environment.
    # You may also leave this empty (set env to an empty list using `env: []`) if the repository does not require any tokens/secrets.
    - name: HF_TOKEN           # Name of the environment variable.
      value: "${env:HF_TOKEN}" # Value of the environment variable. Here, we set HF_TOKEN to the local environment variable HF_TOKEN.
    - name: SOME_OTHER_VARIABLE
      value: "abc"
papers: [lu2024conch] # List of papers that this task is based on. Papers are specified by their IDs in the papers.bib file.
category: pathology # Category of the task.
requires: cpu # If your task requires a GPU, change this to "cuda".
description: Perform feature extraction on an input image using CONCH. # Description of the task. This should be 1-3 sentences in length, explaining to the LLM what this tool should do.
arguments:
  # List of arguments of the task. Each argument is a dictionary with the keys "name", "description", and "type".
  # For example, the following 3 lines define an argument "input_image" with a description "Path to the input image" and a type "str".
  - name: input_image
    description: Path to the input image
    type: str  # supported types are "str", "int", "float", "bool", "list", "dict"
  # You may define more arguments as needed...
returns:
  # List of outputs of the task. Each output is a dictionary with the keys "name", "description", and "type".
  # Here, we just define a single output "features", but you may define more as needed.
  - name: features
    description: The feature vector extracted from the input image, as a list of floats
    type: list
example:
  # Below, we define an example invocation of the task, i.e. a specific input to the tool.
  # This section is required, and it consists of "arguments" and "mount" (see below).
  arguments:
    # For each input argument, specify the value to be used for the example invocation.
    # You must specify a "name" and a "value" for all arguments that are defined in the "arguments" section.
    - name: input_image
      value: /mount/input/TUM-TCGA-ACRLPPQE.tif
  mount:
    # In this section, you can specify files or folders that should be mounted from the data directory to the container (at "/mount/input" in the container).
    # Each mount is a dictionary with the keys "source" and "target", where "source" is the path to the file or folder in the data directory and "target" is the path to the file or folder in the container.
    # For example, the following line mounts the file "TUM-TCGA-ACRLPPQE.tif" from the data directory to the container, placing it at the path "/mount/input/TUM-TCGA-ACRLPPQE.tif" in the container.
    - source: TUM-TCGA-ACRLPPQE.tif
      target: TUM-TCGA-ACRLPPQE.tif
test_invocations:
  # Below, we define test invocations for the task.
  # Each test invocation is a dictionary with the keys "name", "arguments", and "mount", like the example invocation above (with the addition of the "name" key).
  # The test invocations can be used in the unit tests to check that the task is working as expected.
  # Below, we define 3 test invocations for the task, named "tif", "png", and "jpg". 
  # It is recommended that you define at least 3 test invocations (of course, you can choose any names you want).
  - name: tif
    arguments:
      - name: input_image
        value: /mount/input/MUC/MUC-TCGA-ACCPKIPN.tif
    mount:
      - source: MUC-TCGA-ACCPKIPN.tif
        target: MUC-TCGA-ACCPKIPN.tif
  - name: png
    arguments:
      - name: input_image
        value: /mount/input/TCGA-BRCA_patch_TCGA-BH-A0DE-01Z-00-DX1.64A0340A-8146-48E8-AAF7-4035988B9152.png
    mount:
      - source: TCGA-BRCA_patch_TCGA-BH-A0DE-01Z-00-DX1.64A0340A-8146-48E8-AAF7-4035988B9152.png
        target: TCGA-BRCA_patch_TCGA-BH-A0DE-01Z-00-DX1.64A0340A-8146-48E8-AAF7-4035988B9152.png
  - name: jpg
    arguments:
      - name: input_image
        value: /mount/input/TCGA-BRCA_patch_TCGA-BH-A0DE-01Z-00-DX1.64A0340A-8146-48E8-AAF7-4035988B9152.jpg
    mount:
      - source: TCGA-BRCA_patch_TCGA-BH-A0DE-01Z-00-DX1.64A0340A-8146-48E8-AAF7-4035988B9152.jpg
        target: TCGA-BRCA_patch_TCGA-BH-A0DE-01Z-00-DX1.64A0340A-8146-48E8-AAF7-4035988B9152.jpg

